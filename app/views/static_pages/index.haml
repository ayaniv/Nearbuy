/= gmaps("map_options" => {"libraries" => ["places"], "zoom" => 13, "auto_zoom" => false, id: "map_home_page", "detect_location" => "false"}, "markers" => {"data" => @address.to_gmaps4rails})
/= gmaps("map_options" => {"zoom" => 13, "detect_location" => "true", "center_on_user" => "true", id: "map_home_page", raw:'{zoomControl: true, streetViewControl: false, mapTypeControl: false,}'}) #"auto_zoom" => false, id: "map_home_page"}, "markers" => {"data" => @address.to_gmaps4rails})
      

.row
  .col-lg-12
    %h1.text-center
      %span A great place to find goods

.row.container
  .col-lg-12
    %p.text-center
      %h1{style:"display: none"} Items Around You
    .spinner{style:"display:none"}= image_tag "ajax-loader.gif"

.row.container
  .col-lg-12
    %h3
      - if params[:location] || params[:query]
        Search
        = "for #{params[:query]}" unless params[:query].blank?
        = "near #{params[:location]}" unless params[:location].blank?
      - else
        Some random items in your neighborhood

- if current_user && (params[:query] || params[:location])
  .row.container
    .col-lg-6
    .col-lg-6.text-right
      #slider.medium
      #echo.medium
      = current_user ? "Range in #{current_user.profile.distance_units}" : "Range in KM"

  .row.container
    .col-lg-12.results_category
      - Category.all.each do |category|
        = check_box_tag category.name.downcase, category.id, checked:true, class: "filter_results"
        = category.name

    
.row
  .col-lg-12
    .items
      = render partial:"items/items", locals:{items: @items}

= content_for :head do 
  :css
    @media screen and (min-width: 480px) { 
      #map_banner{
        display: block;
      }
    }

:coffee
  jQuery ->
    # This methods gets loaded at the start with varaibles from server. 
    # This allows some kind of location based on ip
    put_map = () ->
      # Create a custom position object to display map
      position = {
        latitude: "#{@address.latitude}"
        longitude: "#{@address.longitude}"
      }
      # Finally, display the map
      display_map(position)
      
    # First verions of map to be displayed based on 
    # ip or something we get from server
    put_map()

:css
  #slider {
        float: left;
        width: 300px;
        margin: 4px 20px 0 0;
    }

    .medium {
        font-size: 14px;
    }
    
    .ui-slider-handle {
        outline: none;
    }
